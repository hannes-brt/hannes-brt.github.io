<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Hannes Bretschneider]]></title>
  <link href="http://hannes-brt.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://hannes-brt.github.io/"/>
  <updated>2013-08-11T21:00:55-04:00</updated>
  <id>http://hannes-brt.github.io/</id>
  <author>
    <name><![CDATA[Hannes Bretschneider]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPython Slideshows will change the way you work]]></title>
    <link href="http://hannes-brt.github.io/blog/2013/08/11/ipython-slideshows-will-change-the-way-you-work/"/>
    <updated>2013-08-11T19:05:00-04:00</updated>
    <id>http://hannes-brt.github.io/blog/2013/08/11/ipython-slideshows-will-change-the-way-you-work</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t been gripped by the iPython Notebook craze yet, let me
quickly fill you in: <a href="http://ipython.org/">iPython</a> is a whole suite
of tools whose goal it is to cover the whole scientific workflow from
interactive data analysis to publication. It&rsquo;s main focus, as is easy
to guess, is Python, but they are ambitious about including other
languages and already iPython can magically whizz data back and forth
between Python, R, Octave, and soon, Julia.</p>

<p>Just this last Friday, after 11 years since the very first version of
iPython and a breathtaking surge in popularity during the last year,
the iPython team released
<a href="http://archive.ipython.org/release/1.0.0/">version 1.0</a>. This is a
major milestone, mainly because of one feature, which many people
might easily overlook: <code>ipython nbconvert</code>.</p>

<p>Let me explain: iPython Notebook is an interactive notebook that runs
in your browser. It has a cell format, where each cell can either
contain formatted text, or executable code. You can insert typeset
mathematics, images, videos, arbitrary HTML, and pretty much
everything you can imagine. Now, <code>nbconvert</code> will take a notebook and
convert it to one of many output formats. So you can export to a
static HTML page, a LaTeX document, Markdown, or even a slideshow
running in your browser, enabled by
<a href="http://lab.hakim.se/reveal-js/">Reveal.js</a>. This may not sound like
too much, but try to realize what this means: you now have an
interactive programming environment that let&rsquo;s you use the combined
universes of all the Python, R, and Octave (Matlab) packages and use
them for interactive data analysis. iPython Notebook keeps all your
results, figures, and outputs in a single file, in a plain-text based
format, which you can put under version-control, email, edit, and view
on any platform. After your analysis is done you can run your notebook
through a simple tool which will produce a publishable document in a
myriad of formats. If you&rsquo;re a scientist and you work with data,
that&rsquo;s just enormous.</p>

<p>Now one of the coolest new features are the Reveal.js based
slideshows. Here is an
<a href="http://www.slideviper.oquanta.info/tutorial/slideshow_tutorial_slides.html?transition=none#/">example</a>
by the developer of the slideshow feature Dami√°n Avila which shows how
to turn any iPython Notebook into a slideshow and how to include math,
images, videos, tables, etc. However, what&rsquo;s slightly annoying about
all the iPython Notebook formats, including the slideshow, is that
there is no way to hide the code used to generate certain output. So,
if you create a plot with matplotlib, your readers will always see the
code you used to generate that figure. I don&rsquo;t know why such a
seemingly obvious feature hasn&rsquo;t been implemented yet, but apparently
there are some unspecified legal issues as hinted at by iPython
developer
<a href="http://python.6.x6.nabble.com/IPython-User-Hide-code-cells-in-the-notebook-tp4997151p4997302.html">Brian Granger</a>.</p>

<p>However, it is quite straight-forward to use a little bit of
Javascript to simply hide the input cells in the browser when using
the HTML or Reveal.js output. Here is a Javascript function (from
Stack Overflow user <a href="http://stackoverflow.com/questions/3336497/javascript-hiding-divs">Felix Kling</a>)
that hides any arbitrary class in a HTML document:</p>

<p>```javascript
function hideElements(elements, start) {</p>

<pre><code>for(var i = 0, length = elements.length; i &lt; length;i++) {
    if(i &gt;= start) {
        elements[i].style.display = "none";
    }
}
</code></pre>

<p>}
```</p>

<p>To hide the input cells we only need to hide the <code>#input</code> and optionally the <code>#prompt</code> classes. This is easily done by simply appending the following HTML to the output of <code>nbconvert</code>:</p>

<p>```html</p>

<script type="text/javascript">
function hideElements(elements, start) {
    for(var i = 0, length = elements.length; i < length;i++) {
        if(i >= start) {
            elements[i].style.display = "none";
        }
    }
}
var input_elements = document.getElementsByClassName('input');
hideElements(input_elements, 0);
var prompt_elements = document.getElementsByClassName('prompt');
hideElements(prompt_elements, 0);
</script>


<p>```</p>

<p>Now, magically, you have a clean document, scrubbed of all code that
you can go on to publish or present. Still, your code is still present
in the document and the notebook, making your results always
reproducable. The code is only hidden in the output.</p>

<p>To make this really simple, I created a small command line tool
<code>ipy_hide_input</code> (download from
<a href="https://gist.github.com/hannes-brt/6207507">gist</a>). You can use the
tool either in-place on a file, or on stdin like so:</p>

<p>```bash
ipy_hide_input input_file.slides.html # modify file in-place</p>

<h1>work on stdin</h1>

<p>ipython nbconvert &mdash;to slids input.ipynb &mdash;stdout | ipy_hide_input > input.slides.html
```</p>
]]></content>
  </entry>
  
</feed>
