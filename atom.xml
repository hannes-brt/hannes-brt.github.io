<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hannes Bretschneider]]></title>
  <link href="http://hannes-brt.github.io/atom.xml" rel="self"/>
  <link href="http://hannes-brt.github.io/"/>
  <updated>2013-08-08T17:37:31-04:00</updated>
  <id>http://hannes-brt.github.io/</id>
  <author>
    <name><![CDATA[Hannes Bretschneider]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Column-Slicing in PyCUDA]]></title>
    <link href="http://hannes-brt.github.io/blog/2013/08/07/column-slicing-in-pycuda/"/>
    <updated>2013-08-07T19:35:00-04:00</updated>
    <id>http://hannes-brt.github.io/blog/2013/08/07/column-slicing-in-pycuda</id>
    <content type="html"><![CDATA[<p><a href="http://documen.tician.de/pycuda/index.html">PyCUDA</a>&rsquo;s <code>GPUArray</code>
class is designed to be an analogue to the Numpy <code>ndarray</code>, but while
PyCUDA is still under heavy development it is still missing some
crucial functionality that would make it a real drop-in replacement
for Numpy. Most importantly, slicing of GPUArrays has only been
recently implemented in version <code>2013.1</code>, but unfortunately, the
implementation is a little lacking in that it seems to implement
general slicing, but actually doesn&rsquo;t. There is also potential for a
quite subtle bug that may alter the content of your array if you don&rsquo;t
pay attention.</p>

<p>First, let&rsquo;s initialize our GPU and create a GPUArray to work on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pycuda.autoinit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pycuda</span> <span class="kn">import</span> <span class="n">gpuarray</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pycuda.curandom</span> <span class="kn">import</span> <span class="n">rand</span> <span class="k">as</span> <span class="n">curand</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">float</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float32</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">X</span> <span class="o">=</span> <span class="n">curand</span><span class="p">((</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="nb">float</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">c_contiguous</span>               <span class="c"># New GPUArray is C-contiguous</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we take a column-slice of this array, the returned slice is no
longer a contiguous block of memory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">X</span><span class="p">[:,:</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">forc</span>                       <span class="c"># Array is no longer contiguous</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, most of the operations in <code>GPUArray</code> are not
implemented for non-contiguous arrays, so using the slicing operator
to get a column slice actually doesn&rsquo;t have much utility yet. However,
what&rsquo;s worse, if we get a new view on the non-contiguous array, the
flag signaling that the array is non-contiguous is discarded and the
view treats the memory as contiguous:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y_view</span> <span class="o">=</span> <span class="n">Y</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y_view</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">c_contiguous</span>          <span class="c"># Magically, Y_view appears contiguous now</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y_view</span><span class="o">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">X</span><span class="o">.</span><span class="n">get</span><span class="p">()[:,:</span><span class="mi">100</span><span class="p">]</span>       <span class="c"># compare to slicing on CPU</span>
</span><span class='line'><span class="n">array</span><span class="p">([[</span> <span class="bp">True</span><span class="p">,</span>  <span class="bp">True</span><span class="p">,</span>  <span class="bp">True</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span>  <span class="bp">True</span><span class="p">,</span>  <span class="bp">True</span><span class="p">,</span>  <span class="bp">True</span><span class="p">],</span>
</span><span class='line'>       <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
</span><span class='line'>       <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
</span><span class='line'>       <span class="o">...</span><span class="p">,</span>
</span><span class='line'>       <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
</span><span class='line'>       <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
</span><span class='line'>       <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ouch, that&rsquo;s not what wanted. The <code>GPUArray.view()</code> function does not
remember the actual memory layout of <code>Y</code> and therefore the data in all
rows after the first is wrong.</p>

<p>To work around this, you can use the <code>pycuda.driver.Memcpy2D</code> function
to copy the data to a new contiguous array. Here is a function that
creates a new GPUArray and performs a memory copy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_columns</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dtype</span> <span class="o">=</span> <span class="n">mat</span><span class="o">.</span><span class="n">dtype</span>
</span><span class='line'>    <span class="n">itemsize</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dtype</span><span class="p">(</span><span class="n">dtype</span><span class="p">)</span><span class="o">.</span><span class="n">itemsize</span>
</span><span class='line'>    <span class="n">N</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="n">mat</span><span class="o">.</span><span class="n">shape</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="n">stop</span> <span class="o">-</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">mat</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">c_contiguous</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">start</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">stop</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="ow">and</span> <span class="n">stop</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">stop</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="ow">and</span> <span class="n">stop</span> <span class="o">&gt;</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">new_mat</span> <span class="o">=</span> <span class="n">gpuarray</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="n">dtype</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">copy</span> <span class="o">=</span> <span class="n">drv</span><span class="o">.</span><span class="n">Memcpy2D</span><span class="p">()</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">set_src_device</span><span class="p">(</span><span class="n">mat</span><span class="o">.</span><span class="n">gpudata</span><span class="p">)</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">src_x_in_bytes</span> <span class="o">=</span> <span class="n">start</span> <span class="o">*</span> <span class="n">itemsize</span>    <span class="c"># Offset of the first column in bytes</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">set_dst_device</span><span class="p">(</span><span class="n">new_mat</span><span class="o">.</span><span class="n">gpudata</span><span class="p">)</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">src_pitch</span> <span class="o">=</span> <span class="n">M</span> <span class="o">*</span> <span class="n">itemsize</span>   <span class="c"># Width of a row in bytes in the source array</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">dst_pitch</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">width_in_bytes</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">itemsize</span>  <span class="c"># Width of sliced row</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">N</span>
</span><span class='line'>    <span class="n">copy</span><span class="p">(</span><span class="n">aligned</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_mat</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use the function as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">extract_columns</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">Y</span><span class="o">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">X</span><span class="o">.</span><span class="n">get</span><span class="p">()[:,:</span><span class="mi">100</span><span class="p">])</span> <span class="c"># Indeed, we got the slice we wanted</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
